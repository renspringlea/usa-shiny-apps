[{"name":"app.R","content":"#####################\n### Load packages ###\n#####################\n\nlibrary(shiny) #For creating the shiny web app\nlibrary(ggplot2) #For graphing\nlibrary(scales) #To help graphing\nlibrary(plotly) #To help interactive graphing\n\n#################\n### Load data ###\n#################\n\nread_df_shiny_2 <- readRDS(\"data/df_shiny_2.Rda\")\n\n#################################\n### Define UI for application ###\n#################################\n\nui <- fluidPage(\n  titlePanel(\"Animals by State and Species\"),\n  \n  # Dropdown menu for selecting states\n  selectInput(\"state\", \"Select a State:\", choices = unique(read_df_shiny_2$state)),\n  \n  # Plot output area\n  plotlyOutput(\"columnGraph\")\n)\n\n#####################\n### Define server ###\n#####################\n\nserver <- function(input, output) {\n  output$columnGraph <- renderPlotly({\n    # Filter data based on the selected state\n    filtered_data <- read_df_shiny_2[read_df_shiny_2$state == input$state, ]\n    \n    # Generate the plot\n    g2 <- ggplot(filtered_data, aes(x=reorder(Species, Value), y=Value, text=ValueF)) +\n      geom_col() +\n      xlab(NULL) +\n      scale_y_continuous(labels = unit_format(unit = \"M\", scale = 1e-6),\n                         name=paste0(\"Number killed* annually in \",input$state)) +\n      coord_flip()# +\n      #geom_text(aes(label = scales::comma(Value)))\n    \n    print(g2)\n    \n    # Convert ggplot to plotly and specify tooltip\n    ggplotly(g2, tooltip = \"text\")\n  })\n}\n\n###########################\n### Run the application ###\n###########################\n\nshinyApp(ui = ui, server = server)\n\n","type":"text"},{"name":"data/df_shiny_2.Rda","content":"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","type":"binary"}]
