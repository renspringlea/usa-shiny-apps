[{"name":"app.R","content":"#####################\n### Load packages ###\n#####################\n\nlibrary(shiny) #For creating the shiny web app\nlibrary(sf) #For spatial data\nlibrary(ggplot2) #For graphing\nlibrary(scales) #To help graphing\nlibrary(viridis) #To help graphing\nlibrary(plotly) #For interactive graphing\n\n#################\n### Load data ###\n#################\n\nread_df_shiny_1 <- readRDS(\"data/read_df_shiny_1.Rda\")\n\n#################################\n### Define UI for application ###\n#################################\n\nui <- fluidPage(\n  titlePanel(\"Animals by Species and State\"),\n  \n  \n  \n  selectInput(\"column\", \"Select Animal:\",\n              choices = colnames(read_df_shiny_1)[c(9:21)], \n              selected = colnames(read_df_shiny_1)[c(9:21)]),\n  \n  mainPanel(\n    plotlyOutput(\"map\")\n  )\n)\n\n#####################\n### Define server ###\n#####################\n\nserver <- function(input, output) {\n  output$map <- renderPlotly({\n    # Filter data based on selected column\n    #filtered_data <- read_df_shiny_1[,read_df_shiny_1[[input$column]]!= NA ]\n    \n    colid <- which(names(read_df_shiny_1)==input$column)\n    \n    # Create ggplot object\n    p <- ggplot(data = read_df_shiny_1, \n                aes(fill = get(names(read_df_shiny_1)[colid]),\n                    text=paste0(state,\":\\n\",formatC((get(names(read_df_shiny_1)[colid])/1000000),\n                                                    format=\"fg\", big.mark=\",\",digits=3),\" million\"))) +\n                    \n      geom_sf(colour=\"white\") +\n      theme_void() +\n      geom_sf_text(aes(label=iso3166_2), colour=\"white\") +\n      scale_fill_viridis(name=input$column,\n                         option=\"rocket\", direction=-1, \n                         labels = unit_format(unit = \"M\", scale = 1e-6)) +\n      ggtitle(input$column,\n              subtitle=\"Number killed in USA annually *\") +\n      theme(plot.background = element_rect(fill=\"white\",color=\"white\"),\n            legend.position=\"bottom\",\n            legend.key.height = unit(1, 'cm'),\n            legend.key.width = unit(2, 'cm'),\n            legend.title = element_blank(),\n            plot.title = element_text(hjust = 0.5),\n            plot.subtitle = element_text(hjust = 0.5))\n    \n    \n    # Render the plot\n    print(p)\n    \n    # Convert ggplot to plotly and specify tooltip\n    ggplotly(p, tooltip = \"text\")  %>%\n      layout(xaxis=list(visible=FALSE),\n             yaxis=list(visible=FALSE))\n    \n  })\n}\n\n###########################\n### Run the application ###\n###########################\n\nshinyApp(ui = ui, server = server)\n\n","type":"text"},{"name":"data/read_df_shiny_1.Rda","content":"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\n7+wgz5krlUALhft44e3/Am+vc7uNWAAA","type":"binary"}]
